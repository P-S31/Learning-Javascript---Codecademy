Variables: 
In programming, a variable is a container for a value. You can think of variables as little containers for information that live in a computer’s memory. Information stored in variables, such as a username, account number, or even personalized greeting can then be found in memory.

In short, variables label and store data in memory. There are only a few things you can do with variables:

Create a variable with a descriptive name.
Store or update information stored in a variable.
Reference or “get” information stored in a variable. 

- Covering var, let and const keywords
//
//
//
Create a Variable: var 

    EXAMPLE: var myName = 'Arya';
             console.log(myName);
             // Output: Arya 
             
1. var, short for variable, is a JavaScript keyword that creates, or declares, a new variable.
2. myName is the variable’s name. Capitalizing in this way is a standard convention in JavaScript called camel casing. In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. (e.g. camelCaseEverything).
3. = is the assignment operator. It assigns the value ('Arya') to the variable (myName).
4. 'Arya' is the value assigned (=) to the variable myName. You can also say that the myName variable is initialized with a value of 'Arya'.
5. After the variable is declared, the string value 'Arya' is printed to the console by referencing the variable name: console.log(myName).

QUESTIONS:
  Q1 Declare a variable named favoriteFood using the var keyword and assign to it the string 'pizza'.
  Q2 Declare a variable named numOfSlices using the var keyword and assign to it the number 8. 
  Q3 Under the numOfSlices variable, use console.log() to print the value saved to favoriteFood. On the following line, use console.log() to print the value saved to numOfSlices.
  
ANSWERS:
    var favouriteFood = 'pizza';
    var numOfSlices = 8;
    console.log (favouriteFood);
    console.log(numOfSlices);
//    
//  
//    
Create a Variable let: 
let was introduced in ES6 - The let keyword signals that the variable can be reassigned a different value.
For EXAMPLE:

    let meal = 'Enchiladas';
    console.log(meal); // Output: Enchiladas
    meal = 'Burrito';
    console.log(meal); // Output: Burrito
    
EXAMPLE of undefined:

    let price;
    console.log(price); // Output: undefined
    price = 350;
    console.log(price); // Output: 350
    
If we don’t assign a value to a variable declared using the let keyword, it automatically has a value of undefined.

QUESTIONS:
Q1 Create a let variable called changeMe and set it equal to the boolean true.
Q2 On the line after changeMe is declared, set the value of changeMe to be the boolean false. To check if changeMe was reassigned, log the value saved to changeMe to the console. 

ANSWERS: 
    let changeMe = true;
    changeMe = false;
    console.log(changeMe);
//
//   
//
Create a Variable: const
A const variable cannot be reassigned because it is constant. If you try to reassign a const variable, you’ll get a TypeError. Constant variables must be assigned a value when declared. If you try to declare a const variable without a value, you’ll get a SyntaxError. If you’re trying to decide between which keyword to use, let or const, think about whether you’ll need to reassign the variable later on. If you do need to reassign the variable use let, otherwise, use const.

QUESTIONS:
Q1: Create a constant variable named entree and set it to equal to the string 'Enchiladas'.
Q2: Just to check that you’ve saved the value of 'Enchiladas' to entree, log the value of entree to the console.
Q3: Great, let’s see what happens if you try to reassign a constant variable.
    Copy and Paste: entree = 'Tacos'
This code throws the following error when you run your code:
    *TypeError: Assignment to constant variable.*
After you clear this checkpoint, if you want to see about another quirk of const in action open the hint!

ANSWERS: 
const entree = 'Enchiladas';
console.log(entree);
const testing;

Declaring a const variable without a value (const testing;) 
You should see a different error this time: SyntaxError: Missing initializer in const declaration (this is related to syntax). 
//
//
//
Mathematical Assignment Operators 
For EXAMPLE:

    let w = 4;
    w = w + 1;
    console.log(w); // Output: 5
    
    let w = 4;
    w += 1;
    console.log(w); // Output: 5
    
QUESTIONS:

Q1 Use the += mathematical assignment operator to increase the value stored in levelUp by 5.
Q2 Use the -= mathematical assignment operator to decrease the value stored in powerLevel by 100.
Q3 Use the *= mathematical assignment operator to multiply the value stored in multiplyMe by 11.
Q4 Use the /= mathematical assignment operator to divide the value stored in quarterMe by 4.

ANSWERS: 
let levelUp = 10;
let powerLevel = 9001;
let multiplyMe = 32;
let quarterMe = 1152;

levelUp += 5; 
powerLevel -= 100;
multiplyMe *= 11;
quarterMe /= 4;

console.log('The value of levelUp:', levelUp); 
console.log('The value of powerLevel:', powerLevel); 
console.log('The value of multiplyMe:', multiplyMe); 
console.log('The value of quarterMe:', quarterMe);
//
//
//
The Increment and Decrement Operator:
Other mathematical assignment operators include the increment operator (++) and decrement operator (--). 
The increment operator will increase the value of the variable by 1. The decrement operator will decrease the value of the variable by 1.

    For EXAMPLE:

    let a = 10;
    a++;
    console.log(a); // Output: 11
    
    let b = 20;
    b--;
    console.log(b); // Output: 19
    
Q1 Using the increment operator, increase the value of gainedDollar.
Q2 Using the decrement operator, decrease the value of lostDollar 

ANSWERS: 
let gainedDollar = 3;
let lostDollar = 50;

gainedDollar++;
lostDollar--;
//
//
//
String Concatenation with Variables:
The + operator can be used to combine two string values even if those values are being stored in variables:

    let myPet = 'armadillo';
    console.log('I own a pet ' + myPet + '.'); 
    // Output: 'I own a pet armadillo.' 
    
QUESTIONS:
Q1 Create a variable named favoriteAnimal and set it equal to your favorite animal.
Q2 Use console.log() to print 'My favorite animal: ANIMAL' to the console. Use string concatenation so that ANIMAL is replaced with the value in your favoriteAnimal variable. 

ANSWERS: 
let favouriteAnimal = 'Dog';
console.log('My favourite animal: ' + favouriteAnimal);
// Output: 'my favourite animal: Dog' 
//
//
//
String Interpolation:
In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals. Check out the following example where a template literal is used to log strings together For EXAMPLE:

    const myPet = 'armadillo';
    console.log(`I own a pet ${myPet}.`);
    // Output: I own a pet armadillo.
    

